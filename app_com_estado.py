import streamlit as st
import pandas as pd
import yfinance as yf
import json
from datetime import datetime
from sklearn.ensemble import RandomForestClassifier
import os

ARQUIVO_ESTADO = 'estado_fractalis.json'

# Garantir que o arquivo existe na primeira execu√ß√£o
if not os.path.exists(ARQUIVO_ESTADO):
    with open(ARQUIVO_ESTADO, 'w') as f:
        json.dump({}, f)

def carregar_estado():
    try:
        with open(ARQUIVO_ESTADO, 'r') as f:
            return json.load(f)
    except:
        return {}

def salvar_estado(estado):
    with open(ARQUIVO_ESTADO, 'w') as f:
        json.dump(estado, f, indent=4)

def classificar_regime(dados):
    if 'Close' not in dados.columns or len(dados['Close'].dropna()) < 10:
        return "Indefinido"

    volatilidade = dados['Close'].pct_change().rolling(window=5).std().dropna()
    if len(volatilidade) == 0:
        return "Indefinido"

    ultimo_valor = volatilidade.iloc[-1]
    if pd.isna(ultimo_valor):
        return "Indefinido"

    if ultimo_valor < 0.01:
        return "Est√°vel"
    elif ultimo_valor > 0.03:
        return "Ca√≥tico"
    else:
        return "Transi√ß√£o"

def previsao_random_forest(dados):
    df = dados[['Close']].copy()
    df['Retorno'] = df['Close'].pct_change()
    df['Target'] = (df['Retorno'].shift(-1) > 0).astype(int)
    df.dropna(inplace=True)

    if len(df) < 10:
        return "Indefinido"

    X = df[['Close']]
    y = df['Target']

    modelo = RandomForestClassifier(n_estimators=100, random_state=42)
    modelo.fit(X, y)
    previsao = modelo.predict(X.tail(1))
    return "COMPRAR" if previsao[0] == 1 else "VENDER"

st.title("üìä Corpus Fractalis ‚Äì Intelig√™ncia Fractal de Mercado")

ativo = st.text_input("Digite o c√≥digo do ativo (ex: WEGE3.SA)", "WEGE3.SA")

if st.button("Executar An√°lise"):
    with st.spinner("üîé Carregando dados..."):
        dados = yf.download(ativo, period="6mo", interval="1d")

    if dados.empty or 'Close' not in dados.columns:
        st.error("‚ùå Dados indispon√≠veis ou c√≥digo inv√°lido.")
    else:
        regime = classificar_regime(dados)
        preco_atual = round(dados['Close'].dropna().iloc[-1], 2)
        data_hoje = datetime.today().strftime('%Y-%m-%d')

        estado = carregar_estado()
        registro = estado.get(ativo, {})
        posicao = registro.get("posi√ß√£o", "Fechada")
        nova_decisao = None

        if regime == "Est√°vel":
            decisao = previsao_random_forest(dados)

            if decisao == "Indefinido":
                st.warning("‚ö†Ô∏è Dados insuficientes para prever")
            elif posicao == "Aberta" and registro.get("√∫ltima_decis√£o") == decisao:
                st.info(f"‚úÖ Recomenda√ß√£o mantida: {decisao} (posi√ß√£o j√° aberta)")
            elif posicao == "Aberta" and decisao == "VENDER":
                nova_decisao = "FECHAR"
                st.warning("üîÑ Revers√£o: Recomenda√ß√£o de FECHAR posi√ß√£o")
                posicao = "Fechada"
            else:
                nova_decisao = decisao
                st.success(f"üìå Nova recomenda√ß√£o: {decisao}")
                posicao = "Aberta"
        elif regime == "Indefinido":
            st.warning("‚ö†Ô∏è Regime n√£o p√¥de ser determinado")
        else:
            st.warning(f"‚ö†Ô∏è Regime atual: {regime} ‚Äì IA suspensa")

        estado[ativo] = {
            "√∫ltima_data": data_hoje,
            "√∫ltimo_regime": regime,
            "√∫ltima_decis√£o": nova_decisao or registro.get("√∫ltima_decis√£o", "N/A"),
            "√∫ltimo_pre√ßo": preco_atual,
            "posi√ß√£o": posicao
        }

        salvar_estado(estado)

        st.subheader("üìò Mem√≥ria T√°tica do Ativo")
        st.json(estado[ativo])
